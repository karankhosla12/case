<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Query Form</title>
    <style>
        /* General Styling */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f6f9;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 480px;
            margin: 50px auto;
            padding: 20px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        label {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 6px;
            display: block;
            color: #555;
        }

        input, textarea, button {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
        }

        textarea {
            resize: vertical;
        }

        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #45a049;
        }

        .output, .additional-fields {
            margin-top: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .dialog-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 600px;
            display: none;
            z-index: 9999;
            animation: fadeIn 0.3s ease-out;
        }

        .dialog-box button {
            background-color: #f44336;
            padding: 10px 20px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        .dialog-box button:hover {
            background-color: #e53935;
        }

        /* Keyframe animation for fadeIn effect */
        @keyframes fadeIn {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }

        /* Additional styling for responsive design */
        @media (max-width: 600px) {
            .container {
                padding: 15px;
            }

            h2 {
                font-size: 22px;
            }

            button {
                font-size: 14px;
            }

            input, textarea, button {
                padding: 10px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Submit Your Ticket </h2>
        <form id="queryForm">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="description">Description:</label>
            <textarea id="description" name="description" rows="4" required></textarea>

            <button type="submit">Submit</button>
        </form>

        <div class="output" id="output"></div>
        <div class="additional-fields" id="additionalFields"></div>
        <button id="submitDataBtn" style="display:none;">Submit Data</button>
    </div>

    <!-- Dialog Box -->
    <div id="dialogBox" class="dialog-box">
        <h3>Query Results:</h3>
        <div id="dialogContent"></div>
        <button id="closeDialogBtn">Close</button>
    </div>

    <script>
        document.getElementById('queryForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const description = document.getElementById('description').value;

            // Query the Hugging Face API
            async function query(data) {
                const response = await fetch(
                    "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-mnli-xnli",
                    {
                        headers: {
                            Authorization: "Bearer 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",
                            "Content-Type": "application/json",
                        },
                        method: "POST",
                        body: JSON.stringify(data),
                    }
                );
                return await response.json();
            }

            // Call the Hugging Face API to get labels
            query({"inputs": description, "parameters": {"candidate_labels": ["Login", "Billing", "inmail", "Ads", "Talent Solutions"]}})
                .then(response => {
                    document.getElementById('output').innerText = JSON.stringify(response, null, 2);
                    const highestLabel = response.labels[response.scores.indexOf(Math.max(...response.scores))];

                    let additionalFieldsHtml = `<label for='category'>Case Category:</label>
                                              <input type='text' id='category' value='${highestLabel}' readonly><br><br>`;

                    if (highestLabel === "Billing") {
                        additionalFieldsHtml += `<label>LinkedIn profile URL:</label><input type='text' id='linkedinProfile'><br>
                                                <label>Credit card number:</label><input type='text' id='creditCardNumber'><br>
                                                <label>Products billed for:</label><input type='text' id='productsBilled'><br>
                                                <p>Filling these helps us resolve your cases faster</p>`;
                    } else if (highestLabel === "Ads") {
                        additionalFieldsHtml += `<label>Ads account ID:</label><input type='text' id='adsAccountId'><br>
                                                <label>LinkedIn profile URL:</label><input type='text' id='adsLinkedinProfile'><br>
                                                <label>Campaign Used:</label><input type='text' id='campaignUsed'><br>
                                                <p>Filling these helps us resolve your cases faster</p>`;
                    } else if (highestLabel === "Talent Solutions") {
                        additionalFieldsHtml += `<label>Recruiter ID:</label><input type='text' id='recruiterId'><br>
                                                <label>LinkedIn profile URL:</label><input type='text' id='talentSolutionsLinkedinProfile'><br>
                                                <label>Project ID:</label><input type='text' id='projectId'><br>
                                                <p>Filling these helps us resolve your cases faster</p>`;
                    } else if (highestLabel === "inmail") {
                        additionalFieldsHtml += `<label>LinkedIn profile URL:</label><input type='text' id='inmailLinkedinProfile'><br>
                                                <label>URL of screenshot of the error:</label><input type='text' id='errorScreenshotUrl'><br>
                                                <label>Time of the error:</label><input type='text' id='errorTime'><br>
                                                <p>Filling these helps us resolve your cases faster</p>`;
                    }

                    // Insert the additional fields and make the Submit Data button visible
                    document.getElementById('additionalFields').innerHTML = additionalFieldsHtml;
                    document.getElementById('submitDataBtn').style.display = 'inline-block';
                })
                .catch(error => {
                    document.getElementById('output').innerText = "Error: " + error.message;
                });
        });

        // Handle the Submit Data button click event
        document.getElementById('submitDataBtn').addEventListener('click', async function() {
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const description = document.getElementById('description').value;
            const caseCategory = document.getElementById('category').value;

            const payload = {
                name,
                email,
                description,
                caseCategory
            };

            try {
                const response = await fetch("https://xlr8.karankhosla99.workers.dev", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(payload),
                });

                const result = await response.json();
                if (response.ok) {
                    document.getElementById('output').innerText = "Case submitted successfully!";
// Wait for 5 seconds before calling the GET query
setTimeout(async () => {
    // Perform GET request to fetch results
    const getResponse = await fetch(`https://xlr8.karankhosla99.workers.dev?caseCategory=${caseCategory}`);
    const getResult = await getResponse.json();

    // Parse the API response into a human-readable format
    const readableResult = `
        The top solver for cases in the category "${caseCategory}" is "${getResult.topSolvedBy.name}" in the last 24 hours, 
        who solved ${getResult.topSolvedBy.count} cases, accounting for ${getResult.topSolvedBy.percentage} of the total cases.

        The top 3 case owners in 24 hours in this category are:
        1. ${getResult.topCaseOwners[0].caseOwner || "Unknown"} with ${getResult.topCaseOwners[0].caseCount} cases.
        2. ${getResult.topCaseOwners[1].caseOwner || "Unknown"} with ${getResult.topCaseOwners[1].caseCount} cases.
        3. ${getResult.topCaseOwners[2].caseOwner || "Unknown"} with ${getResult.topCaseOwners[2].caseCount} cases.

        A total of ${getResult.totalCases} cases were recorded in the category "${caseCategory}".
        This is a trending issue. 
    
    
    `;

    // Display the results in the dialog box
    document.getElementById('dialogContent').innerText = readableResult.trim();
    document.getElementById('dialogBox').style.display = 'block';
}, 5000);

                } else {
                    document.getElementById('output').innerText = "Error: " + result.error;
                }
            } catch (error) {
                document.getElementById('output').innerText = "Error: " + error.message;
            }
        });

        // Close the dialog box
        document.getElementById('closeDialogBtn').addEventListener('click', () => {
            document.getElementById('dialogBox').style.display = 'none';
        });
    </script>
</body>
</html>
